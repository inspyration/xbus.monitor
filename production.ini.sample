###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/environment.html
###

[app:main]
use = egg:xbus.monitor

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en_US
pyramid.includes =
    pyramid_redis_sessions
    pyramid_tm

fig.sqlalchemy.url = postgresql://xbus:xbus@{socket}/xbus
fig.sqlalchemy.default.socket = localhost:5432

# SAML2 Authentication configuration - if disabled, HTTP Auth will be used.
# Requires "lasso".

saml2.enabled = False
saml2.sp_meta =
saml2.priv_key =
saml2.idp_meta =

# Secret value; not to be shared by multiple Pyramid programs.
redis.sessions.secret =
saml2.auth_secret =

# pyramid_httpauth settings.
# <https://github.com/tarzanjw/pyramid_httpauth>

# default schema to challenge client (digest or basic), default=digest
httpauth.schema = basic # Should be "digest" in the real world.

# realm string for auth challenge header
httpauth.realm = xbus_monitor

# qop string for auth challenge header (used for Digest Auth only)
# httpauth.qop

# name of NonceManager class to use (used for Digest Auth only)
# httpauth.nonce_manager

# The secret key used to sign on nounce, used for built-in SignedNonceManager (if
# httpauth.nonce_manager is not provided).
# httpauth.nonce_manager_secret

# domain string for auth challenge header
# httpauth.domain

# name of password-retrieval function
# httpauth.get_password =

# name of group-finder callback function
httpauth.groupfinder = xbus.monitor.auth:get_user_principals

# redis session settings.

# Session timeout: 2 hours.
redis.sessions.timeout = 7200

# redis session cookie settings
redis.sessions.cookie_name = session
# cookie expiration after 1 year...
redis.sessions.cookie_max_age = 31536000
redis.sessions.cookie_path = /
redis.sessions.cookie_domain =
redis.sessions.cookie_secure = False
redis.sessions.cookie_httponly = False
redis.sessions.cookie_on_exception = True

# you can supply a redis connection string as a URL
redis.sessions.url = redis://localhost:6379/0

# or as individual settings (note: the URL gets preference if you do both)
#redis.sessions.host = localhost
#redis.sessions.port = 6379
#redis.sessions.db = 0
#redis.sessions.password = None

# additional options can be supplied to redis-py's StrictRedis
#redis.sessions.socket_timeout =
#redis.sessions.connection_pool =
#redis.sessions.charset = utf-8
#redis.sessions.errors = strict
#redis.sessions.unix_socket_path =

# in the advanced section we'll cover how to instantiate your own client
#redis.sessions.client_callable = my.dotted.python.callable

# along with defining your own serialize and deserialize methods
# redis.sessions.serialize = cPickle.dumps
# redis.sessions.deserialize = cPickle.loads

# you can specify a prefix to be used with session keys in redis
redis.sessions.prefix = pyramid_openerp_demo.session.

# or you can supply your own UID generator callable for session keys
# redis.sessions.id_generator = niftyuid

# By default, the toolbar only appears for clients from IP addresses
# '127.0.0.1' and '::1'.
# debugtoolbar.hosts = 127.0.0.1 ::1

###
# wsgi server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/logging.html
###

[loggers]
keys = root, monitor, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_monitor]
level = DEBUG
handlers =
qualname = monitor

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
